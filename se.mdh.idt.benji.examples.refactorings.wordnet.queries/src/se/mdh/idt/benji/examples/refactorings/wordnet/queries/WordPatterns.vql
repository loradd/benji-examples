package se.mdh.idt.benji.examples.refactorings.wordnet.queries

import "http://www.mdh.se/idt/benji/trace/Trace"
import "http://www.mdh.se/examples/refactorings/WordNet"

import se.mdh.idt.benji.trace.api.current
import se.mdh.idt.benji.trace.api.initial

// word - initial
pattern initial_word (word : Trace, initial_word : Word) {
	find initial (word, initial_word); 
	Word (initial_word); 
}

// word - current
pattern current_word (word : Trace, current_word : Word) {
	find current (word, current_word); 
	Word (current_word);	
}

// word - preserved
pattern preserved_word (word : Trace) {
	find initial_word (word, _initial_word); 
	find current_word (word, _current_word);
}

// word - created
pattern created_word (word : Trace) {
	neg find initial_word (word, _initial_word); 
	find current_word (word, _current_word); 
}

// word - deleted
pattern deleted_word (word : Trace) {
	find initial_word (word, _initial_word); 
	neg find current_word (word, _current_word); 
}

// word - name - initial
pattern initial_word_name (word : Trace, initial_word : Word, name : java String) {
	find initial_word (word, initial_word); 
	Word.name (initial_word, name); 
}

// word - name - current
pattern current_word_name (word : Trace, current_word : Word, name : java String) {
	find current_word (word, current_word); 
	Word.name (current_word, name); 
}

// word - name - preserved
pattern preserved_word_name (word : Trace, name : java String) {
	find initial_word_name (word, _initial_word, name); 
	find current_word_name (word, _current_word, name); 
}

// word - name - set
pattern set_word_name (word : Trace, name : java String) {
	neg find initial_word_name (word, _initial_word, name); 
	find current_word_name (word, _current_word, name); 
}

// word - name - unset
pattern unset_word_name (word : Trace, name : java String) {
	find initial_word_name (word, _initial_word, name); 
	neg find current_word_name (word, _current_word, name); 
}

// word - synsets - initial
pattern initial_word_synsets (word : Trace, initial_word : Word, synset : Trace, initial_synset : Synset) {
	find initial_word (word, initial_word); 
	find initial_synset (synset, initial_synset); 
	Word.synsets (initial_word, initial_synset); 
}

// word - synsets - current
pattern current_word_synsets (word : Trace, current_word : Word, synset : Trace, current_synset : Synset) {
	find current_word (word, current_word); 
	find current_synset (synset, current_synset); 
	Word.synsets (current_word, current_synset); 
}

// word - synsets - preserved
pattern preserved_word_synsets (word : Trace, synset : Trace) {
	find initial_word_synsets (word, _initial_word, synset, _initial_synset); 
	find current_word_synsets (word, _current_word, synset, _current_synset); 
}

// word - synsets - inserted
pattern inserted_word_synsets (word : Trace, synset : Trace) {
	neg find initial_word_synsets (word, _initial_word, synset, _initial_synset); 
	find current_word_synsets (word, _current_word, synset, _current_synset); 
}

// word - synsets - removed
pattern removed_word_synsets (word : Trace, synset : Trace) {
	find initial_word_synsets (word, _initial_word, synset, _initial_synset); 
	neg find current_word_synsets (word, _current_word, synset, _current_synset); 
}