package se.mdh.idt.benji.examples.refactorings.metamodel.queries

import "http://www.mdh.se/examples/refactorings/Metamodel"
import "http://www.mdh.se/idt/benji/trace/Trace"

// package - get
pattern get_package (^package : TraceLink) {
	find initial_package (^package, _initial_package);
	find current_package (^package, _current_package);	
}

// package - create
pattern create_package (^package : TraceLink) {
	neg find initial_package (^package, _initial_package); 	
	find current_package (^package, _current_package);
}

// package - delete
pattern delete_package (^package : TraceLink) {
	find initial_package (^package, _initial_package);
	neg find current_package (^package, _current_package);	
}

// package - initial
pattern initial_package (^package : TraceLink, initial_package : Package) {
	find initial_classifier (^package, initial_package);
}

// package - current
pattern current_package (^package : TraceLink, current_package : Package) {
	find current_classifier (^package, current_package);
}

// package - name - get
pattern get_package_name (^package : TraceLink, name : java String) {
	find initial_package_name (^package, _initial_package, name);
	find current_package_name (^package, _current_package, name); 
}

// package - name - set
pattern set_package_name (^package : TraceLink, name : java String) {
	neg find initial_package_name (^package, _initial_package, name);
	find current_package_name (^package, _current_package, name);	
}

// package - name - unset
pattern unset_package_name (^package : TraceLink, name : java String) {
	find initial_package_name (^package, _initial_package, name);
	neg find current_package_name (^package, _current_package, name);
}

// package - name - initial
pattern initial_package_name (^package : TraceLink, initial_package : Package, name : java String) {
	find initial_classifier_name (^package, initial_package, name);	
}

// package - name - current
pattern current_package_name (^package : TraceLink, current_package : Package, name : java String) {
	find current_classifier_name (^package, current_package, name);	
}

// package - superPackage - get
pattern get_package_superPackage (^package : TraceLink, superPackage : TraceLink) {
	find initial_package_superPackage (^package, _initial_package, superPackage, _initial_superPackage);
	find current_package_superPackage (^package, _current_package, superPackage, _current_superPackage); 
}

// package - superPackage - set
pattern set_package_superPackage (^package : TraceLink, superPackage : TraceLink) {
	neg find initial_package_superPackage (^package, _initial_package, superPackage, _initial_superPackage);
	find current_package_superPackage (^package, _current_package, superPackage, _current_superPackage);	
}

// package - superPackage - unset
pattern unset_package_superPackage (^package : TraceLink, superPackage : TraceLink) {
	find initial_package_superPackage (^package, _initial_package, superPackage, _initial_superPackage);
	neg find current_package_superPackage (^package, _current_package, superPackage, _current_superPackage);
}

// package - superPackage - initial
pattern initial_package_superPackage (^package : TraceLink, initial_package : Package, superPackage : TraceLink, initial_superPackage : Package) {
	find initial_classifier_package (^package, initial_package, superPackage, initial_superPackage);	
}

// package - superPackage - current
pattern current_package_superPackage (^package : TraceLink, current_package : Package, superPackage : TraceLink, current_superPackage : Package) {
	find current_classifier_package (^package, current_package, superPackage, current_superPackage);
}

// package - uri - get
pattern get_package_uri (^package : TraceLink, uri : java String) {
	find initial_package_uri (^package, _initial_package, uri);
	find current_package_uri (^package, _current_package, uri); 
}

// package - uri - set
pattern set_package_uri (^package : TraceLink, uri : java String) {
	neg find initial_package_uri (^package, _initial_package, uri);
	find current_package_uri (^package, _current_package, uri);	
}

// package - uri - unset
pattern unset_package_uri (^package : TraceLink, uri : java String) {
	find initial_package_uri (^package, _initial_package, uri);
	neg find current_package_uri (^package, _current_package, uri);
}

// package - uri - initial
pattern initial_package_uri (^package : TraceLink, initial_package : Package, uri : java String) {
	find initial_package (^package, initial_package);
	Package.uri (initial_package, uri);	
}

// package - uri - current
pattern current_package_uri (^package : TraceLink, current_package : Package, uri : java String) {
	find current_package (^package, current_package);
	Package.uri (current_package, uri);
}

// package - classifier - get
pattern get_package_classifier (^package : TraceLink, classifier : TraceLink) {
	find initial_package_classifier (^package, _initial_package, classifier, _initial_classifier);
	find current_package_classifier (^package, _current_package, classifier, _current_classifier);
}

// package - classifier - insert
pattern insert_package_classifier (^package : TraceLink, classifier : TraceLink) {
	neg find initial_package_classifier (^package, _initial_package, classifier, _initial_classifier);
	find current_package_classifier (^package, _current_package, classifier, _current_classifier);	
}

// package - classifier - remove
pattern remove_package_classifier (^package : TraceLink, classifier : TraceLink) {
	find initial_package_classifier (^package, _initial_package, classifier, _initial_classifier);
	neg find current_package_classifier (^package, _current_package, classifier, _current_classifier);	
}

// package - classifier - initial
pattern initial_package_classifier (^package : TraceLink, initial_package : Package, classifier : TraceLink, initial_classifier : Classifier) {
	find initial_package (^package, initial_package);
	find initial_classifier (classifier, initial_classifier);
	Package.classifiers (initial_package, initial_classifier);	
}

// package - classifier - current
pattern current_package_classifier (^package : TraceLink, current_package : Package, classifier : TraceLink, current_classifier : Classifier) {
	find current_package (^package, current_package);
	find current_classifier (classifier, current_classifier);
	Package.classifiers (current_package, current_classifier);	
}

// package - subPackage - get
pattern get_package_subPackage (^package : TraceLink, subPackage : TraceLink) {
	find initial_package_subPackage (^package, _initial_package, subPackage, _initial_subPackage);
	find current_package_subPackage (^package, _current_package, subPackage, _current_subPackage);
}

// package - subPackage - insert
pattern insert_package_subPackage (^package : TraceLink, subPackage : TraceLink) {
	neg find initial_package_subPackage (^package, _initial_package, subPackage, _initial_subPackage);
	find current_package_subPackage (^package, _current_package, subPackage, _current_subPackage);	
}

// package - subPackage - remove
pattern remove_package_subPackage (^package : TraceLink, subPackage : TraceLink) {
	find initial_package_subPackage (^package, _initial_package, subPackage, _initial_subPackage);
	neg find current_package_subPackage (^package, _current_package, subPackage, _current_subPackage);
}

// package - subPackage - initial
pattern initial_package_subPackage (^package : TraceLink, initial_package : Package, subPackage : TraceLink, initial_subPackage : Package) {
	find initial_package_classifier (^package, initial_package, subPackage, initial_subPackage);	
}

// package - subPackage - current
pattern current_package_subPackage (^package : TraceLink, current_package : Package, subPackage : TraceLink, current_subPackage : Package) {
	find current_package_classifier (^package, current_package, subPackage, current_subPackage);	
}

// package - class - get
pattern get_package_class (^package : TraceLink, class : TraceLink) {
	find initial_package_class (^package, _initial_package, class, _initial_class);
	find current_package_class (^package, _current_package, class, _current_class); 
}

// package - class - insert
pattern insert_package_class (^package : TraceLink, class : TraceLink) {
	neg find initial_package_class (^package, _initial_package, class, _initial_class);
	find current_package_class (^package, _current_package, class, _current_class);	
}

// package - class - remove
pattern remove_package_class (^package : TraceLink, class : TraceLink) {
	find initial_package_class (^package, _initial_package, class, _initial_class);
	neg find current_package_class (^package, _current_package, class, _current_class);	
}

// package - class - initial
pattern initial_package_class (^package : TraceLink, initial_package : Package, class : TraceLink, initial_class : Class) {
	find initial_package_classifier (^package, initial_package, class, initial_class);	
}

// package - class - current
pattern current_package_class (^package : TraceLink, current_package : Package, class : TraceLink, current_class : Class) {
	find current_package_classifier (^package, current_package, class, current_class);	
}

// package - datatype - get
pattern get_package_datatype (^package : TraceLink, datatype : TraceLink) {
	find initial_package_datatype (^package, _initial_package, datatype, _initial_datatype);
	find current_package_datatype (^package, _current_package, datatype, _current_datatype); 
}

// package - datatype - insert
pattern insert_package_datatype (^package : TraceLink, datatype : TraceLink) {
	neg find initial_package_datatype (^package, _initial_package, datatype, _initial_datatype);
	find current_package_datatype (^package, _current_package, datatype, _current_datatype);	
}

// package - datatype - remove
pattern remove_package_datatype (^package : TraceLink, datatype : TraceLink) {
	find initial_package_datatype (^package, _initial_package, datatype, _initial_datatype);
	neg find current_package_datatype (^package, _current_package, datatype, _current_datatype);	
}

// package - datatype - initial
pattern initial_package_datatype (^package : TraceLink, initial_package : Package, datatype : TraceLink, initial_datatype : DataType) {
	find initial_package_classifier (^package, initial_package, datatype, initial_datatype);
}

// package - datatype - current
pattern current_package_datatype (^package : TraceLink, current_package : Package, datatype : TraceLink, current_datatype : DataType) {
	find current_package_classifier (^package, current_package, datatype, current_datatype);	
}

// package - enumeration - get
pattern get_package_enumeration (^package : TraceLink, enumeration : TraceLink) {
	find initial_package_enumeration (^package, _initial_package, enumeration, _initial_enumeration);
	find current_package_enumeration (^package, _current_package, enumeration, _current_enumeration);  
}

// package - enumeration - insert
pattern insert_package_enumeration (^package : TraceLink, enumeration : TraceLink) {
	neg find initial_package_enumeration (^package, _initial_package, enumeration, _initial_enumeration); 
	find current_package_enumeration (^package, _current_package, enumeration, _current_enumeration);	
}

// package - enumeration - remove
pattern remove_package_enumeration (^package : TraceLink, enumeration : TraceLink) {
	find initial_package_enumeration (^package, _initial_package, enumeration, _initial_enumeration);
	neg find current_package_enumeration (^package, _current_package, enumeration, _current_enumeration); 	
}

// package - enumeration - initial
pattern initial_package_enumeration (^package : TraceLink, initial_package : Package, enumeration : TraceLink, initial_enumeration : Enumeration) {
	find initial_package_datatype (^package, initial_package, enumeration, initial_enumeration);	
}

// package - enumeration - current
pattern current_package_enumeration (^package : TraceLink, current_package : Package, enumeration : TraceLink, current_enumeration : Enumeration) {
	find current_package_datatype (^package, current_package, enumeration, current_enumeration);
}