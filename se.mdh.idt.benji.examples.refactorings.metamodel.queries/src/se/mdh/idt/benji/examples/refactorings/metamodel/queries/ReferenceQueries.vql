package se.mdh.idt.benji.examples.refactorings.metamodel.queries

import "http://www.mdh.se/examples/refactorings/Metamodel"
import "http://www.mdh.se/idt/benji/trace/Trace"

// reference - get
pattern get_reference (reference : TraceLink) {
	find initial_reference (reference, _initial_reference);
	find current_reference (reference, _current_reference);
}

// reference - create
pattern create_reference (reference : TraceLink) {
	neg find initial_reference (reference, _initial_reference);
	find current_reference (reference, _current_reference); 	
}

// reference - delete
pattern delete_reference (reference : TraceLink) {
	find initial_reference (reference, _initial_reference);
	neg find current_reference (reference, _current_reference);	
}

// reference - initial
pattern initial_reference (reference : TraceLink, initial_reference : Reference) {
	find initial_structuralFeature (reference, initial_reference);	
}

// reference - current
pattern current_reference (reference : TraceLink, current_reference : Reference) {
	find current_structuralFeature (reference, current_reference);
}

// reference - name - get
pattern get_reference_name (reference : TraceLink, name : java String) {
	find initial_reference_name (reference, _initial_reference, name);
	find current_reference_name (reference, _current_reference, name);
}

// reference - name - set
pattern set_reference_name (reference : TraceLink, name : java String) {
	neg find initial_reference_name (reference, _initial_reference, name);
	find current_reference_name (reference, _current_reference, name);	
}

// reference - name - unset
pattern unset_reference_name (reference : TraceLink, name : java String) {
	find initial_reference_name (reference, _initial_reference, name);
	neg find current_reference_name (reference, _current_reference, name);
}

// reference - name - initial
pattern initial_reference_name (reference : TraceLink, initial_reference : Reference, name : java String) {
	find initial_structuralFeature_name (reference, initial_reference, name);	
}

// reference - name - current
pattern current_reference_name (reference : TraceLink, current_reference : Reference, name : java String) {
	find current_structuralFeature_name (reference, current_reference, name);
}

// reference - owner - get
pattern get_reference_owner (reference : TraceLink, owner : TraceLink) {
	find initial_reference_owner (reference, _initial_reference, owner, _initial_owner);
	find current_reference_owner (reference, _current_reference, owner, _current_owner);
}

// reference - owner - set
pattern set_reference_owner (reference : TraceLink, owner : TraceLink) {
	neg find initial_reference_owner (reference, _initial_reference, owner, _initial_owner);
	find current_reference_owner (reference, _current_reference, owner, _current_owner);	
}

// reference - owner - unset
pattern unset_reference_owner (reference : TraceLink, owner : TraceLink) {
	find initial_reference_owner (reference, _initial_reference, owner, _initial_owner);
	neg find current_reference_owner (reference, _current_reference, owner, _current_owner);
}

// reference - owner - initial
pattern initial_reference_owner (reference : TraceLink, initial_reference : Reference, owner : TraceLink, initial_owner : Class) {
	find initial_structuralFeature_owner (reference, initial_reference, owner, initial_owner);	
}

// reference - owner - current
pattern current_reference_owner (reference : TraceLink, current_reference : Reference, owner : TraceLink, current_owner : Class) {
	find current_structuralFeature_owner (reference, current_reference, owner, current_owner);
}

// reference - lower - get
pattern get_reference_lower (reference : TraceLink, lower : java Integer) {
	find initial_reference_lower (reference, _initial_reference, lower);
	find current_reference_lower (reference, _current_reference, lower);
}

// reference - lower - set
pattern set_reference_lower (reference : TraceLink, lower : java Integer) {
	neg find initial_reference_lower (reference, _initial_reference, lower);
	find current_reference_lower (reference, _current_reference, lower);
}

// reference - lower - unset
pattern unset_reference_lower (reference : TraceLink, lower : java Integer) {
	find initial_reference_lower (reference, _initial_reference, lower);
	neg find current_reference_lower (reference, _current_reference, lower);	
}

// reference - lower - initial
pattern initial_reference_lower (reference : TraceLink, initial_reference : Reference, lower : java Integer) {
	find initial_structuralFeature_lower (reference, initial_reference, lower);	
}

// reference - lower - current
pattern current_reference_lower (reference : TraceLink, current_reference : Reference, lower : java Integer) {
	find current_structuralFeature_lower (reference, current_reference, lower);
}

// reference - upper - get
pattern get_reference_upper (reference : TraceLink, upper : java Integer) {
	find initial_reference_upper (reference, _initial_reference, upper);
	find current_reference_upper (reference, _current_reference, upper);
}

// reference - upper - set
pattern set_reference_upper (reference : TraceLink, upper : java Integer) {
	neg find initial_reference_upper (reference, _initial_reference, upper);
	find current_reference_upper (reference, _current_reference, upper);
}

// reference - upper - unset
pattern unset_reference_upper (reference : TraceLink, upper : java Integer) {
	find initial_reference_upper (reference, _initial_reference, upper);
	neg find current_reference_upper (reference, _current_reference, upper);	
}

// reference - upper - initial
pattern initial_reference_upper (reference : TraceLink, initial_reference : Reference, upper : java Integer) {
	find initial_structuralFeature_upper (reference, initial_reference, upper);	
}

// reference - upper - current
pattern current_reference_upper (reference : TraceLink, current_reference : Reference, upper : java Integer) {
	find current_structuralFeature_upper (reference, current_reference, upper);
}

// reference - type - get
pattern get_reference_type (reference : TraceLink, type : TraceLink) {
	find initial_reference_type (reference, _initial_reference, type, _initial_type);
	find current_reference_type (reference, _current_reference, type, _current_type);
}

// reference - type - set
pattern set_reference_type (reference : TraceLink, type : TraceLink) {
	neg find initial_reference_type (reference, _initial_reference, type, _initial_type);
	find current_reference_type (reference, _current_reference, type, _current_type);	
}

// reference - type - unset
pattern unset_reference_type (reference : TraceLink, type : TraceLink) {
	find initial_reference_type (reference, _initial_reference, type, _initial_type);
	neg find current_reference_type (reference, _current_reference, type, _current_type);
}

// reference - type - initial
pattern initial_reference_type (reference : TraceLink, initial_reference : Reference, type : TraceLink, initial_type : Class) {
	find initial_reference (reference, initial_reference);
	find initial_class (type, initial_type);
	Reference.type (initial_reference, initial_type);
}

// reference - type - current
pattern current_reference_type (reference : TraceLink, current_reference : Reference, type : TraceLink, current_type : Class) {
	find current_reference (reference, current_reference);
	find	 current_class (type, current_type);
	Reference.type (current_reference, current_type);
}

// reference - containment - get
pattern get_reference_containment (reference : TraceLink, containment : java Boolean) {
	find initial_reference_containment (reference, _initial_reference, containment);
	find current_reference_containment (reference, _current_reference, containment);
}

// reference - containment - set
pattern set_reference_containment (reference : TraceLink, containment : java Boolean) {
	neg find initial_reference_containment (reference, _initial_reference, containment);
	find current_reference_containment (reference, _current_reference, containment);	
}

// reference - containment - unset
pattern unset_reference_containment (reference : TraceLink, containment : java Boolean) {
	find initial_reference_containment (reference, _initial_reference, containment);
	neg find current_reference_containment (reference, _current_reference, containment);
}

// reference - containment - initial
pattern initial_reference_containment (reference : TraceLink, initial_reference : Reference, containment : java Boolean) {
	find initial_reference (reference, initial_reference); 	
	Reference.containment (initial_reference, containment);
}

// reference - containment - current
pattern current_reference_containment (reference : TraceLink, current_reference : Reference, containment : java Boolean) {
	find current_reference (reference, current_reference);
	Reference.containment (current_reference, containment);
}

// reference - opposite - get
pattern get_reference_opposite (reference : TraceLink, opposite : TraceLink) {
	find initial_reference_opposite (reference, _initial_reference, opposite, _initial_opposite);
	find current_reference_opposite (reference, _current_reference, opposite, _current_opposite);
}

// reference - opposite - set
pattern set_reference_opposite (reference : TraceLink, opposite : TraceLink) {
	neg find initial_reference_opposite (reference, _initial_reference, opposite, _initial_opposite);
	find current_reference_opposite (reference, _current_reference, opposite, _current_opposite);	
}

// reference - opposite - unset
pattern unset_reference_opposite (reference : TraceLink, opposite : TraceLink) {
	find initial_reference_opposite (reference, _initial_reference, opposite, _initial_opposite);
	neg find current_reference_opposite (reference, _current_reference, opposite, _current_opposite);
}

// reference - opposite - initial
pattern initial_reference_opposite (reference : TraceLink, initial_reference : Reference, opposite : TraceLink, initial_opposite : Reference) {
	find initial_reference (reference, initial_reference);
	find initial_reference (opposite, initial_opposite);
	Reference.opposite (initial_reference, initial_opposite);
}

// reference - opposite - current
pattern current_reference_opposite (reference : TraceLink, current_reference : Reference, opposite : TraceLink, current_opposite : Reference) {
	find current_reference (reference, current_reference);
	find current_reference (opposite, current_opposite);
	Reference.opposite (current_reference, current_opposite);
}